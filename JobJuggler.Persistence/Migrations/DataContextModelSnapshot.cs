// <auto-generated />
using System;
using JobJuggler.Domain.Enums;
using JobJuggler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace JobJuggler.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("main")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "main", "price_type", new[] { "none", "per_unit", "flat_rate" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "price_type", new[] { "flat_rate", "none", "per_unit" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobJuggler.Domain.Enums.EnumModel", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enum_name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enum_value");

                    b.ToTable((string)null);

                    b.ToView("enums", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_modified");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("integer")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("companies", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_modified");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("integer")
                        .HasColumnName("last_modified_by_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", "identity");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_modified");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("integer")
                        .HasColumnName("last_modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_clients_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("IX_clients_deleted_by_id");

                    b.HasIndex("LastModifiedById")
                        .HasDatabaseName("IX_clients_last_modified_by_id");

                    b.ToTable("clients", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsigneeId")
                        .HasColumnType("integer")
                        .HasColumnName("consignee_id");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_closed")
                        .HasComment("The final date when the invoice was fully processed and all the payment has cleared");

                    b.Property<DateTime?>("DateInvoiced")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_invoiced")
                        .HasComment("The date the customer was sent the invoice");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_paid")
                        .HasComment("The latest date the payment was submitted");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paid")
                        .HasComment("Indicates if the invoice has been fully paid for");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_id")
                        .HasComment("The method used for submitting payment by the consignee");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number")
                        .HasComment("A unique number used for easily identifying jobs with customers");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price")
                        .HasComment("The calculated total from the invoice lines. Not meant to be directly edited");

                    b.HasKey("Id");

                    b.HasIndex("ConsigneeId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("invoices", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id")
                        .HasComment("The item that is on the invoice");

                    b.Property<int>("NumOfUnits")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_units")
                        .HasComment("The number of the same line items in the invoice");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price")
                        .HasComment("The total price of the item from the quantity");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.ToTable("invoice_lines", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelReason")
                        .HasColumnType("text")
                        .HasColumnName("cancel_reason")
                        .HasComment("Brief explanation of why the job was canceled");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("canceled_date")
                        .HasComment("The date time the job was canceled");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id")
                        .HasComment("The main person or business requesting the service");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date")
                        .HasComment("The date time the job was completed");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_canceled")
                        .HasComment("Indicates if the job has been canceled");

                    b.Property<bool?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed")
                        .HasComment("Indicates if the job is fully complete meaning all payments have cleared");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes")
                        .HasComment("General notes about the order");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("price")
                        .HasComment("The total sum price of all the line items related to the order");

                    b.Property<DateTime>("ScheduledArrivalEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_arrival_end_date")
                        .HasComment("The scheduled end datetime that the vendor will arrive at the job location");

                    b.Property<DateTime>("ScheduledArrivalStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_arrival_start_date")
                        .HasComment("The scheduled beginning datetime that the vendor will arrive at the job location");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date")
                        .HasComment("The date the job was booked");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_date")
                        .HasComment("The date time the job was started");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LocationId");

                    b.ToTable("jobs", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.LineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price")
                        .HasComment("The default price for the item. Can be overridden when put on an invoice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<PriceType>("PriceType")
                        .HasColumnType("price_type")
                        .HasColumnName("price_type");

                    b.HasKey("Id");

                    b.ToTable("line_items", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("GateCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gate_code");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(15, 7)
                        .HasColumnType("numeric(15,7)")
                        .HasColumnName("latitude");

                    b.Property<string>("LocationType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("location_type");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(15, 7)
                        .HasColumnType("numeric(15,7)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("notes")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("state");

                    b.Property<string>("Street1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street1");

                    b.Property<string>("Street2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street2");

                    b.Property<NpgsqlTsVector>("VectorAddress")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("vector_address")
                        .HasComputedColumnSql("\n                        to_tsvector('english'::regconfig, \n                        ((((CASE WHEN (street1 IS NOT NULL) THEN ((street1)::text || ' '::text) ELSE ''::text END ||\n                            CASE WHEN (city IS NOT NULL) THEN ((city)::text || ' '::text) ELSE ''::text END) || \n                            CASE WHEN (state IS NOT NULL) THEN ((state)::text || ' '::text) ELSE ''::text END) || \n                            CASE WHEN (postal_code IS NOT NULL) THEN ((postal_code)::text || ' '::text) ELSE ''::text END) || \n                            (CASE WHEN (country IS NOT NULL) THEN country ELSE ''::character varying\\nEND)::text))", true);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Guid" }, "location_guid_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "VectorAddress" }, "locations_vector_address_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "VectorAddress" }, "locations_vector_address_idx"), "GIN");

                    b.ToTable("locations", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active")
                        .HasComment("Indicates if the payment method is still meant to be used");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("The name of the payment method used");

                    b.HasKey("Id");

                    b.ToTable("payment_methods", "main");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppRoleClaim", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppRole", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_claims_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUser", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppCompany", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_company_id_foreign");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserClaim", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_claims_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserLogin", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_logins_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserRole", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUserToken", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Client", b =>
                {
                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("JobJuggler.Domain.IdentityModels.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Invoice", b =>
                {
                    b.HasOne("JobJuggler.Domain.Models.Client", "Consignee")
                        .WithMany("Invoices")
                        .HasForeignKey("ConsigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoice_consignee_id_foreign");

                    b.HasOne("JobJuggler.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invoice_payment_method_id_foreign");

                    b.HasOne("JobJuggler.Domain.Models.Job", "Job")
                        .WithOne("Invoice")
                        .HasForeignKey("JobJuggler.Domain.Models.Invoice", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_invoice_id_foreign");

                    b.Navigation("Consignee");

                    b.Navigation("Job");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.InvoiceLine", b =>
                {
                    b.HasOne("JobJuggler.Domain.Models.Invoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("line_invoice_id_foreign");

                    b.HasOne("JobJuggler.Domain.Models.LineItem", "Item")
                        .WithMany("Invoices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("line_item_id_foreign");

                    b.Navigation("Invoice");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Job", b =>
                {
                    b.HasOne("JobJuggler.Domain.Models.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_client_id_foreign");

                    b.HasOne("JobJuggler.Domain.Models.Location", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_location_id_foreign");

                    b.Navigation("Client");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppCompany", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("JobJuggler.Domain.IdentityModels.AppUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Client", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Invoice", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Job", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.LineItem", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.Location", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobJuggler.Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
